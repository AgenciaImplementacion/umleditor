group 'ch.interlis'
version '3.6.8'

apply plugin: "java"
apply plugin: "maven"

sourceCompatibility = "1.6" 
targetCompatibility = "1.6"

compileJava.options.encoding = 'UTF-8'

configurations {
    deployerJars
}

repositories {
    mavenLocal()
    mavenCentral()
    maven { url "https://jars.interlis.ch" }
    flatDir { dirs 'lib' }
}

Properties properties = new Properties()
File propFile=project.rootProject.file('user.properties')
if(propFile.exists()){
	properties.load(propFile.newDataInputStream())
}
def git = System.getProperty('git',properties.get('git','git'))
def repos_pwd = System.getProperty('repos_pwd',properties.get('repos_pwd','repos_pwd'))
def repos_usr = System.getProperty('repos_usr',properties.get('repos_usr','repos_usr'))

compileJava {
    options.fork = true
    options.forkOptions.executable = "javac"
    options.compilerArgs << "-XDignore.symbol.file"
}

sourceSets {
    main {
        java {
            srcDirs = ["src"]
        }
        resources {
            srcDirs = ["src", "resources/de", "resources/fr", "resources/it", "resources/es"]
            include "**/*.properties"
    		include "**/*.gif"
    		include "**/*.jpg"
        }
    }
    test {
        java {
            srcDirs = []
            exclude '**/UmlEditorTestSuite.java'
        }
    }
} 

dependencies {
    implementation name:  'jh'
    implementation name:  'jhotdraw53'
    implementation name:  'sebase'
    implementation name:  'usrdocjh'
    implementation name:  'XMIFramework'
    compile group: 'com.jtattoo', name: 'JTattoo', version: '1.6.11'
    compile group: 'com.google.code.gson', name: 'gson', version: '2.8.2'
    implementation group: 'ch.interlis', name: 'ili2c-tool', version: '5.1.1'
    implementation group: 'ch.interlis', name: 'ili2c-core', version: '5.1.1'
    implementation group: 'ch.ehi', name: 'ehibasics', version: '1.3.0'
    implementation(group:'org.freehep', name:'freehep-graphicsio', version:'2.3'){
    	exclude group:'junit', module:'junit'
    }
    implementation(group:'org.freehep', name:'freehep-graphics2d', version:'2.3'){
    	exclude group:'junit', module:'junit'
    }
    implementation(group:'org.freehep', name:'freehep-io', version:'2.2.2'){
    	exclude group:'junit', module:'junit'
    }
    implementation(group:'org.freehep', name:'freehep-graphicsbase', version:'2.3') {
    	exclude group:'junit', module:'junit'
    }
    implementation(group:'org.freehep', name:'freehep-graphicsio-emf', version:'2.3'){
    	exclude group:'org.freehep', module:'freehep-graphicsio-tests'    	
    	exclude group:'junit', module:'junit'
    }
    implementation(group:'org.freehep', name:'freehep-graphicsio-svg', version:'2.3'){
    	exclude group:'org.freehep', module:'freehep-graphicsio-tests'    	
    	exclude group:'junit', module:'junit'
    }

    // Use JUnit test framework
    testImplementation 'junit:junit:4.12'
    
    deployerJars "org.apache.maven.wagon:wagon-ftp:3.0.0"
}

//create a single Jar with all dependencies
jar { 
        manifest { 
            attributes (
            	'Main-Class': 'ch.ehi.umleditor.application.LauncherView', 
            	"Class-Path": configurations.runtimeClasspath.collect { 'libs/'+it.getName() }.join(' ')
            )
        }
} 

task run(type:JavaExec) {
    classpath = sourceSets.main.runtimeClasspath
	main = "ch.ehi.umleditor.application.LauncherView"
}

task bindist(type: Zip){
	baseName = project.name
	destinationDir = file('dist')
	from jar
	into('docs'){
		from files(fileTree("docs/bindist").include("*")
		, fileTree("other").include("LICENSE.*")
		, "docs/Manual UML-Editor.pdf")
	}
	into('libs'){
		from configurations.runtimeClasspath
	}
}

artifacts {
	archives(bindist.archivePath) {
        type 'zip'
        classifier 'bindist'
        builtBy bindist
    }
    archives(jar.archivePath){
    	builtBy jar
    }
}

uploadArchives {
    repositories {
        mavenDeployer {
        	configuration = configurations.deployerJars
			repository(url: 'ftp://ftp.interlis.ch'){
            	authentication(userName: repos_usr, password: repos_pwd)
            }
        }
    }
}
